This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-07T03:42:26.273Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.env.template
.github/workflows/update-fbi-data.yml
.gitignore
main.py
markup.html
README.md
requirements.txt

================================================================
Repository Files
================================================================

================
File: .env.template
================
# TRMNL Configuration
TRMNL_PLUGIN_UUID=your_plugin_uuid_here

# Debug
DEBUG=False

================
File: .github/workflows/update-fbi-data.yml
================
name: Update FBI Wanted Data

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  update-fbi-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run FBI data sync
      env:
        TRMNL_PLUGIN_UUID: ${{ secrets.TRMNL_PLUGIN_UUID }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: python main.py
      
    - name: Commit and push updated files
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        
        # Add files only if they exist
        if [ -f qr_code.png ]; then
          git add qr_code.png
        fi
        if [ -f profile_image.jpg ]; then
          git add profile_image.jpg
        fi
        
        # Try to commit if there are changes
        git status --porcelain | grep -q . && git commit -m "Update QR code and profile image" && git push || echo "No changes to commit"

================
File: .gitignore
================
.env
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

================
File: main.py
================
import os
import requests
import json
from datetime import datetime
from dotenv import load_dotenv
import time
import base64
import qrcode
from pathlib import Path
import urllib.parse

load_dotenv()

TRMNL_PLUGIN_UUID = os.getenv('TRMNL_PLUGIN_UUID')
TRMNL_WEBHOOK_URL = f"https://usetrmnl.com/api/custom_plugins/{TRMNL_PLUGIN_UUID}"
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

def generate_qr_code(url, save_path):
    try:
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        
        qr.add_data(url)
        qr.make(fit=True)

        qr_image = qr.make_image(fill_color="black", back_color="white")
        
        qr_image.save(save_path)
        return True
    except Exception as e:
        print(f"Error generating QR code: {e}")
        return False

def get_fbi_data(page=1):
    headers = {
        "Accept": "application/json",
        "User-Agent": "TRMNL-FBI-Plugin/1.0"
    }
    
    try:
        response = requests.get(
            f"https://api.fbi.gov/wanted/v1/list",
            params={'page': page},
            headers=headers
        )
        response.raise_for_status()
        if DEBUG:
            print(f"FBI API Response Status: {response.status_code}")
        return response.json()
    except Exception as e:
        print(f"Error fetching FBI data: {e}")
        return None
    
def download_and_save_image(image_url, save_path):
    try:
        encoded_url = urllib.parse.quote_plus(image_url)
        proxy_url = f'https://wsrv.nl/?url={encoded_url}'
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8'
        }
        
        response = requests.get(proxy_url, headers=headers, timeout=15, verify=False)
        
        if response.status_code == 200:
            with open(save_path, 'wb') as f:
                f.write(response.content)
            return True
            
        alt_proxy_url = f'https://images.weserv.nl/?url={encoded_url}'
        response = requests.get(alt_proxy_url, headers=headers, timeout=15, verify=False)
        
        if response.status_code == 200:
            with open(save_path, 'wb') as f:
                f.write(response.content)
            return True
            
        print(f"Failed to download image. Status code: {response.status_code}")
        return False
            
    except Exception as e:
        print(f"Error downloading image: {e}")
        return False
    
def get_best_available_image(images):
    if not images:
        return None
        
    for size in ['large', 'original', 'thumb']:
        image = next((img for img in images if img.get(size)), None)
        if image:
            return image.get(size)
    
    return None

def format_fbi_data(items):
    if not items:
        return None
        
    item = items[0]
    
    dates_of_birth = ', '.join(item.get('dates_of_birth_used', [])) if item.get('dates_of_birth_used') else 'Unknown'
    
    height_min = item.get('height_min', 'Unknown')
    height_max = item.get('height_max', 'Unknown')
    height = f"{height_min}-{height_max}" if height_min != 'Unknown' else 'Unknown'
    
    weight = item.get('weight', 'Unknown')
    
    languages = ', '.join(item.get('languages', [])) if item.get('languages') else 'Unknown'
    
    scars_marks = item.get('scars_and_marks', 'None reported')
    
    fbi_id = item.get('uid', '')
    fbi_url = f"https://www.fbi.gov/wanted/viewing#{fbi_id}" if fbi_id else ''
    
    qr_code_path = 'qr_code.png'
    qr_generated = generate_qr_code(fbi_url, qr_code_path)
    
    qr_code_url = f"https://raw.githubusercontent.com/{os.getenv('GITHUB_REPOSITORY')}/main/qr_code.png" if qr_generated else ''
    
    images = item.get('images', [])
    profile_image_url = ''
    if images:
        image_url = get_best_available_image(images)
        if image_url:
            image_path = 'profile_image.jpg'
            if download_and_save_image(image_url, image_path):
                profile_image_url = f"https://raw.githubusercontent.com/{os.getenv('GITHUB_REPOSITORY')}/main/profile_image.jpg"
            else:
                print("Failed to download image, profile will not be shown")
    
    formatted_data = {
        'title': item.get('title', 'Unknown'),
        'description': item.get('description', ''),
        'subject': ', '.join(item.get('subjects', [])) if item.get('subjects') else 'Unknown',
        'race': item.get('race', 'Unknown'),
        'sex': item.get('sex', 'Unknown'),
        'nationality': item.get('nationality', 'Unknown'),
        'status': item.get('status', ''),
        'reward_text': item.get('reward_text', ''),
        'warning_message': item.get('warning_message', ''),
        'dates_of_birth': dates_of_birth,
        'place_of_birth': item.get('place_of_birth', 'Unknown'),
        'hair': item.get('hair', 'Unknown'),
        'eyes': item.get('eyes', 'Unknown'),
        'height': height,
        'weight': weight,
        'build': item.get('build', 'Unknown'),
        'complexion': item.get('complexion', 'Unknown'),
        'age_range': item.get('age_range', 'Unknown'),
        'languages': languages,
        'scars_marks': scars_marks,
        'remarks': item.get('remarks', ''),
        'details': item.get('details', ''),
        'caution': item.get('caution', ''),
        'fbi_url': fbi_url,
        'qr_code_url': qr_code_url,
        'profile_image_url': profile_image_url
    }
    
    if DEBUG:
        print(f"Formatted data for: {formatted_data['title']}")
    
    return formatted_data

def send_to_trmnl(data):
    try:
        person_data = format_fbi_data(data.get('items', []))
        if not person_data:
            raise ValueError("No person data available")
            
        webhook_body = {
            "merge_variables": {
                "updated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "person": person_data
            }
        }
        
        if DEBUG:
            print(f"Sending data to TRMNL: {json.dumps(webhook_body, indent=2)}")
            
        response = requests.post(
            TRMNL_WEBHOOK_URL,
            json=webhook_body
        )
        response.raise_for_status()
        print(f"Successfully sent data to TRMNL at {datetime.now()}")
    except Exception as e:
        print(f"Error sending to TRMNL: {e}")

def validate_config():
    if not TRMNL_PLUGIN_UUID:
        raise ValueError("TRMNL_PLUGIN_UUID is required. Please set it in your .env file")

def main():
    try:
        validate_config()
        data = get_fbi_data()
        if data:
            send_to_trmnl(data)
        else:
            print("No data received from FBI API")
    except Exception as e:
        print(f"Error in main execution: {e}")

if __name__ == "__main__":
    main()

================
File: markup.html
================
<div class="layout">
  <div class="grid grid--cols-2">
    <div class="col col--start gap--space-between">
      <div class="value value--xxsmall clamp--10">
        <b>Subject:</b> {{ person.description }}
      </div>
      <div class="value value--xxsmall clamp--5">
        Remarks: {{ person.remarks }}
      </div>
      <div class="label clamp--2"><b>QR Code to case details:</b><br /></div>
      <img
        class="image"
        style="width: 100px; height: 100px; margin: 0 auto"
        src="{{ person.qr_code_url }}?t={{ updated_at | date: '%s' }}"
        alt="FBI Case QR Code"
      />
      <span class="description" style="text-align: center"
        >Scan for details</span
      >
    </div>

    <div class="col col--start">
      <img
        class="image-dither"
        style="width: auto; height: 350px"
        src="{{ person.profile_image_url }}?t={{ updated_at | date: '%s' }}"
        alt="{{ person.title }}"
      />
    </div>
  </div>
</div>

<div class="title_bar">
  <img class="image" src="/api/placeholder/32/32" alt="FBI Seal" />
  <span class="title">FBI Most Wanted</span>
  <span class="instance">Last Updated: {{ updated_at }}</span>
</div>

================
File: README.md
================
# FBI Wanted TRMNL Plugin

A TRMNL plugin that displays FBI's Most Wanted list using the official FBI Wanted API.

## Features

- Displays current FBI Most Wanted list
- Shows detailed information for each wanted person
- Auto-updates every 6 hours via GitHub Actions
- Includes warning messages and reward information when available
- Clean, organized display using TRMNL's design system

## Setup

1. Create a new Private Plugin in TRMNL:
   - Go to Plugins -> Private Plugin -> Add New
   - Name it "FBI Most Wanted"
   - Select "Webhook" for the Strategy
   - Save and copy the Plugin UUID

2. Configure the plugin:
   - Copy `.env.example` to `.env`
   - Add your TRMNL Plugin UUID to `.env`
   - Copy the markup from `markup.html` into TRMNL's plugin markup editor

3. Set up GitHub Actions:
   - Add your TRMNL Plugin UUID as a GitHub secret named `TRMNL_PLUGIN_UUID`
   - The workflow will automatically run every 6 hours

## Local Development

1. Install dependencies:
```bash
pip install -r requirements.txt
```

2. Create `.env` file with your configuration:
```bash
cp .env.example .env
```

3. Edit `.env` with your TRMNL Plugin UUID

4. Run the script:
```bash
python main.py
```

## GitHub Actions Configuration

The plugin automatically updates every 6 hours using GitHub Actions. You can also trigger updates manually from the Actions tab in your repository.

## License

MIT License

## Acknowledgments

- FBI Wanted API: https://api.fbi.gov/wanted/v1/list
- TRMNL Framework: https://usetrmnl.com/

================
File: requirements.txt
================
requests==2.31.0
python-dotenv==1.0.0
qrcode==7.4.2
pillow==10.2.0
