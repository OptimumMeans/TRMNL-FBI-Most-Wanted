This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-06T23:08:33.193Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.env.template
.github/workflows/update-fbi-data.yml
.gitignore
main.py
markup.html
README.md
requirements.txt

================================================================
Repository Files
================================================================

================
File: .env.template
================
# TRMNL Configuration
TRMNL_PLUGIN_UUID=your_plugin_uuid_here

# Debug
DEBUG=False

================
File: .github/workflows/update-fbi-data.yml
================
name: Update FBI Wanted Data

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  update-fbi-data:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv
        
    - name: Run FBI data sync
      env:
        TRMNL_PLUGIN_UUID: ${{ secrets.TRMNL_PLUGIN_UUID }}
      run: python main.py

================
File: .gitignore
================
.env
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

================
File: main.py
================
import os
import requests
import json
from datetime import datetime
from dotenv import load_dotenv
import time
import base64

load_dotenv()

TRMNL_PLUGIN_UUID = os.getenv('TRMNL_PLUGIN_UUID')
TRMNL_WEBHOOK_URL = f"https://usetrmnl.com/api/custom_plugins/{TRMNL_PLUGIN_UUID}"
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

def get_fbi_data(page=1):
    headers = {
        "Accept": "application/json",
        "User-Agent": "TRMNL-FBI-Plugin/1.0"
    }
    
    try:
        response = requests.get(
            f"https://api.fbi.gov/wanted/v1/list",
            params={'page': page},
            headers=headers
        )
        response.raise_for_status()
        if DEBUG:
            print(f"FBI API Response Status: {response.status_code}")
        return response.json()
    except Exception as e:
        print(f"Error fetching FBI data: {e}")
        return None

def format_fbi_data(items):
    if not items:
        return None
        
    item = items[0]
    
    dates_of_birth = ', '.join(item.get('dates_of_birth_used', [])) if item.get('dates_of_birth_used') else 'Unknown'
    
    height_min = item.get('height_min', 'Unknown')
    height_max = item.get('height_max', 'Unknown')
    height = f"{height_min}-{height_max}" if height_min != 'Unknown' else 'Unknown'
    
    weight = item.get('weight', 'Unknown')
    
    languages = ', '.join(item.get('languages', [])) if item.get('languages') else 'Unknown'
    
    scars_marks = item.get('scars_and_marks', 'None reported')
    
    fbi_id = item.get('uid', '')
    fbi_url = f"https://www.fbi.gov/wanted/viewing#{fbi_id}" if fbi_id else ''
    
    formatted_data = {
        'title': item.get('title', 'Unknown'),
        'description': item.get('description', ''),
        'subject': ', '.join(item.get('subjects', [])) if item.get('subjects') else 'Unknown',
        'race': item.get('race', 'Unknown'),
        'sex': item.get('sex', 'Unknown'),
        'nationality': item.get('nationality', 'Unknown'),
        'status': item.get('status', ''),
        'reward_text': item.get('reward_text', ''),
        'warning_message': item.get('warning_message', ''),
        'dates_of_birth': dates_of_birth,
        'place_of_birth': item.get('place_of_birth', 'Unknown'),
        'hair': item.get('hair', 'Unknown'),
        'eyes': item.get('eyes', 'Unknown'),
        'height': height,
        'weight': weight,
        'build': item.get('build', 'Unknown'),
        'complexion': item.get('complexion', 'Unknown'),
        'age_range': item.get('age_range', 'Unknown'),
        'languages': languages,
        'scars_marks': scars_marks,
        'remarks': item.get('remarks', ''),
        'details': item.get('details', ''),
        'caution': item.get('caution', ''),
        'fbi_url': fbi_url
    }
    
    if DEBUG:
        print(f"Formatted data for: {formatted_data['title']}")
    
    return formatted_data

def send_to_trmnl(data):
    try:
        person_data = format_fbi_data(data.get('items', []))
        if not person_data:
            raise ValueError("No person data available")
            
        webhook_body = {
            "merge_variables": {
                "updated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "person": person_data
            }
        }
        
        if DEBUG:
            print(f"Sending data to TRMNL: {json.dumps(webhook_body, indent=2)}")
            
        response = requests.post(
            TRMNL_WEBHOOK_URL,
            json=webhook_body
        )
        response.raise_for_status()
        print(f"Successfully sent data to TRMNL at {datetime.now()}")
    except Exception as e:
        print(f"Error sending to TRMNL: {e}")

def validate_config():
    if not TRMNL_PLUGIN_UUID:
        raise ValueError("TRMNL_PLUGIN_UUID is required. Please set it in your .env file")

def main():
    try:
        validate_config()
        data = get_fbi_data()
        if data:
            send_to_trmnl(data)
        else:
            print("No data received from FBI API")
    except Exception as e:
        print(f"Error in main execution: {e}")

if __name__ == "__main__":
    main()

================
File: markup.html
================
<div class="layout">
  <div class="grid gap--large">
    <!-- Header Section -->
    <div class="item">
      <div class="content">
        <span class="value value--xlarge">{{ person.title }}</span>
        {% if person.warning_message != "" %}
        <span class="label label--large label--warning"
          >⚠️ {{ person.warning_message }}</span
        >
        {% endif %}
      </div>
    </div>

    <!-- Main Description -->
    <div class="item">
      <div class="content">
        <span class="description">{{ person.description }}</span>
      </div>
    </div>

    <!-- Physical Description -->
    <div class="grid grid--cols-2 gap--medium">
      <div class="item">
        <div class="content">
          <span class="label">Physical Description</span>
          <div class="flex flex--col gap--small">
            <span class="value value--small">Race: {{ person.race }}</span>
            <span class="value value--small">Sex: {{ person.sex }}</span>
            <span class="value value--small">Hair: {{ person.hair }}</span>
            <span class="value value--small">Eyes: {{ person.eyes }}</span>
            <span class="value value--small">Height: {{ person.height }}</span>
            <span class="value value--small">Weight: {{ person.weight }}</span>
            <span class="value value--small">Build: {{ person.build }}</span>
            <span class="value value--small"
              >Complexion: {{ person.complexion }}</span
            >
          </div>
        </div>
      </div>

      <div class="item">
        <div class="content">
          <span class="label">Personal Information</span>
          <div class="flex flex--col gap--small">
            <span class="value value--small"
              >Age Range: {{ person.age_range }}</span
            >
            <span class="value value--small"
              >Nationality: {{ person.nationality }}</span
            >
            <span class="value value--small"
              >Languages: {{ person.languages }}</span
            >
            <span class="value value--small"
              >Place of Birth: {{ person.place_of_birth }}</span
            >
            <span class="value value--small"
              >DOB Used: {{ person.dates_of_birth }}</span
            >
          </div>
        </div>
      </div>
    </div>

    <!-- Distinguishing Features -->
    {% if person.scars_marks != "None reported" %}
    <div class="item">
      <div class="content">
        <span class="label">Distinguishing Features</span>
        <span class="value value--small">{{ person.scars_marks }}</span>
      </div>
    </div>
    {% endif %}

    <!-- Caution Section -->
    {% if person.caution != "" %}
    <div class="item">
      <div class="content">
        <span class="label label--warning">⚠️ CAUTION</span>
        <span class="description">{{ person.caution }}</span>
      </div>
    </div>
    {% endif %}

    <!-- Reward Section -->
    {% if person.reward_text != "" %}
    <div class="item">
      <div class="content">
        <span class="label label--inverted">💰 REWARD</span>
        <span class="description">{{ person.reward_text }}</span>
      </div>
    </div>
    {% endif %}

    <!-- Remarks Section -->
    {% if person.remarks != "" %}
    <div class="item">
      <div class="content">
        <span class="label">REMARKS</span>
        <span class="description">{{ person.remarks }}</span>
      </div>
    </div>
    {% endif %}
  </div>
</div>

<div class="title_bar">
  <img
    class="image"
    src="https://usetrmnl.com/images/plugins/trmnl--render.svg"
  />
  <span class="title">FBI Most Wanted</span>
  <span class="instance">Last Updated: {{ updated_at }}</span>
</div>

================
File: README.md
================
# FBI Wanted TRMNL Plugin

A TRMNL plugin that displays FBI's Most Wanted list using the official FBI Wanted API.

## Features

- Displays current FBI Most Wanted list
- Shows detailed information for each wanted person
- Auto-updates every 6 hours via GitHub Actions
- Includes warning messages and reward information when available
- Clean, organized display using TRMNL's design system

## Setup

1. Create a new Private Plugin in TRMNL:
   - Go to Plugins -> Private Plugin -> Add New
   - Name it "FBI Most Wanted"
   - Select "Webhook" for the Strategy
   - Save and copy the Plugin UUID

2. Configure the plugin:
   - Copy `.env.example` to `.env`
   - Add your TRMNL Plugin UUID to `.env`
   - Copy the markup from `markup.html` into TRMNL's plugin markup editor

3. Set up GitHub Actions:
   - Add your TRMNL Plugin UUID as a GitHub secret named `TRMNL_PLUGIN_UUID`
   - The workflow will automatically run every 6 hours

## Local Development

1. Install dependencies:
```bash
pip install -r requirements.txt
```

2. Create `.env` file with your configuration:
```bash
cp .env.example .env
```

3. Edit `.env` with your TRMNL Plugin UUID

4. Run the script:
```bash
python main.py
```

## GitHub Actions Configuration

The plugin automatically updates every 6 hours using GitHub Actions. You can also trigger updates manually from the Actions tab in your repository.

## License

MIT License

## Acknowledgments

- FBI Wanted API: https://api.fbi.gov/wanted/v1/list
- TRMNL Framework: https://usetrmnl.com/

================
File: requirements.txt
================
requests==2.31.0
python-dotenv==1.0.0
